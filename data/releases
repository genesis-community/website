{
  "all": [
    {
      "notes": "# Updates\n\n-Can now update subject, SAN, and usage of vault-stored certificates without generating a new key with genesis rotate-secrets --renew\n This allows users to correct warnings that show up in the check during deployment without breaking mutual TLS.\n (Note this will also renew the TTL for the certificates)\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.7.31",
      "version": "2.7.31"
    },
    {
      "notes": "# Updates\n\n- credhub-cli is now a requirement. A check for credhub-cli has been added \n jq v1.6 is now the minimum version required. \n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.7.32",
      "version": "2.7.32"
    },
    {
      "notes": "# New Feature\n\n* Add `update` genesis command to get new version\n\n  Usage: genesis update [-c|--check] [-v|--version VERSION] [-d|--details] [-f|--force]\n\n    -c, --check       Check if a newer version (or the specified version) is\n                      available.\n\n    -v, --version <x> Install the specified version instead of the latest\n\n    -d, --details     Print the release notes of the versions between the current\n                      version and the latest (or the release notes of the\n                      specified version)\n\n    -f, --force       Replace the current genesis executable.  Otherwise,\n                      confirmation will be requested.\n\n# Improvements\n\n* Improve `genesis kit-provider -v` status output\n\n* Improve `genesis list-kits` hint to include -r flag.\n\n* Make it easier to trace the stack\n\n  Adds the -S|--show-stack debug option, and gives better context of traces\n  and errors.\n\n  Behaviour Changes:\n\n  - internal `trace` output will show the location in the code were it was\n    called. If --show-stack option specified, it will show the full stack\n    instead of just the location.\n\n  - internal `dump_vars` output will now show the full stack instead of\n    just the calling location if --show-stack specified (along with\n    --trace or --debug)\n\n  - internal `bail` will show calling location if --trace or --debug is\n    specified, or the full stack if --show-stack is specified (with or\n    without --debug or --trace).  This allows you to see where genesis\n    terminates without wading through all the trace output.\n\n  - internal `bug` will always full stack where the bug was encountered.\n    This allows the user to paste the stack into a defect report against\n    the genesis project.\n\n* Limited false positives of detected changes in pipeline notify summaries. \n\n# Bug Fixes\n\n* Fix getting non-production github release version\n\n  If user specified version by name, it should include draft and\n  prereleases when looking for it.  This was the initial intent, but the\n  wrong options were set when attempting it.\n\n* Fix error when calling `genesis man` on a kit that does not exist.\n\n* Fixes issue where proto-bosh deployment did not have up to date state file.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.7.32",
      "version": "2.7.33"
    },
    {
      "notes": "# Improvements\n\n* `genesis init` can now accept a local compiled kit file as an argument to the `-k` option, allowing locally compiled (or stored) released kit files instead of relying on the local uncompiled `dev` directory.\n\n# Requirement Updates\n\n* BOSH CLI v6.4.4 is now required due to error when accessing non-bosh.io stemcells that are now being specified by upstream deployments.\n\n# Bug Fixes\n\n* `genesis kit-manual` now works on dev kits, or environments that use dev\n  kits\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.7.34",
      "version": "2.7.34"
    },
    {
      "notes": "# Bug Fix\n\n* Update Genesis bosh activities to work with BOSH cli v6.4.4\n\n  As of BOSH cli 6.4.4, BOSH_* variables set to \"\" cause errors, so now they are simply unset.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.7.35",
      "version": "2.7.35"
    },
    {
      "notes": "# New Features\n\n* Auto-connect to BOSH director.\n\n  Genesis can now automatically connect to the correct BOSH director for the\n  specified environment, without need to set up a bosh configuration or\n  manually logging into the director.\n\n  Caveat: The BOSH director that deployed your environment MUST have been\n  deployed by Genesis.  If not, you will still have to target and log into the\n  BOSH director manually.\n\n* Added `genesis bosh` command.\n\n  Instead of worrying about logging into the right BOSH director, and\n  translating genesis environment into BOSH environment and deployment, let\n  Genesis do the heavy lifting.\n\n  If you want to know something about your concourse vms, for example, you\n  just run `genesis bosh my-concourse-env vms --vitals` and you'll get the\n  right output.  Genesis will determine which bosh director deployed\n  `my-concourse-env`, how to connect to it, what the BOSH deployment is named,\n  and return the results of the command you specified.\n\n  By default, the `genesis bosh` command is deployment centric, but sometimes\n  you need to talk to the BOSH director itself.  In that case, you can specify\n  the BOSH deployment itself, and use the `-as-director` (or `-A`) option to\n  indicate that the environment is the director, not a deployment on a\n  different director.  For proto-BOSH environments, this is required.\n\n  See `genesis bosh -h` for more usage details.\n\n* Connect to BOSH director without using the BOSH deployment kit.\n\n  If you still need to connect to a BOSH director directly, you can configure\n  your shell by using `eval \"$(genesis bosh my-target-env --connect)\"`.\n  Please note that this connects to the BOSH director that deployed the\n  `my-target-env`.  If `my-target-env` is a bosh deployment, the command will\n  authenticate to the BOSH director that deployed it, not itself.  In this\n  case, you need to use the `--as-director` option to explicitly state that\n  this is the BOSH environment you wish to connect to.\n\n# Breaking Changes\n\n* Removes legacy support for kits without new or blueprint.\n\n  As of v2.8.0, kits must use new and blueprint hooks.  All modern kits\n  support this model, so anyone actively keeping current with genesis would\n  not be impacted.\n\n* Remove subkits, error if used in env file.\n\n  Subkits have been deprecated since at least 2.6.13, so its time to remove\n  them.\n\n* Remove `--environment` global option.\n\n  The environment option has been replaced with `--bosh-env` option to remove\n  confusion regarding the overloaded 'environment' name.  Henceforth,\n  environment refers to just the deployment environment.  The `-e` shortform\n  is still usable.\n\n# Improvements\n\n## Better Support for using BOSH create-env\n\n  * Starting in v2.8.0, kits that indicate that they are compatible with\n    v2.8.0 can support `use_create_env` as their method of indicating\n    their ability to use create-env instead of deploy for deployments.\n\n    - Valid values are `yes` for this kit always uses create-env, `no` for\n      kits that cannot use create-env, and `allow` for kits that permit\n      either.\n\n    - The kit will have to detect `genesis.use_create_env` in the\n      environment to determine blueprint and other create-env kit\n      behaviour.  Genesis will manage the actual deployment and state file\n      associated with it.\n\n  * Genesis properly handles both legacy features (create-env,bosh-init,\n    proto) and v2.8.0's `genesis.use_create_env` attribute to determine is\n    create-env is to be used.  It will also detect when an incompatible\n    mixture of using create-env and specifying a `genesis.bosh-env`\n    attribute, and fail with an appropriate error message.  A quick update\n    of the environment file by the user will resolve this issue when\n    encountered.\n\n* Provide create-env (i.e.: bosh proto) deployments with diff/confirm\n\n  Since BOSH does not provide a confirmation after a diff on the\n  environment to be deployed, Genesis provides this based on a previous\n  deployment, assuming it was added to the repo.\n\n  If the exodus data from the previous deployment doesn't match the local\n  archived manifest, a warning will be stated, or in the case of running\n  under `-y`, the deploy will be aborted.\n\n  This does require that you ensure you commit your repo after doing \n  deployments, which you should be doing regardless of this feature, as\n  a method to record your deployment history. \n\n## Kit Overrides by Environment\n\n  * Environments can now customize kit behaviour directly, by specifying a\n    `overrides` parameter under the top-level `kit` attribute.  This\n    replaces the repo-wide `kit-overrides.yml` file (though it is still\n    supported.\n\n    This improves the previous behaviour because environments can target\n    different versions of a kit, meaning the one-file-fits-all can be\n    sub-optimal or even broken.  It also means the overrides can propagate\n    through the repo using hierarchical inheritance.\n\n    It comes in three forms:\n\n    - Simple string: By placing the overrides (in yml form) inside a\n      string block, it is applied verbatim. Any spruce operators will be\n      applied to the kits kit.yml only.\n\n      ```\n      kit:\n        overrides: |\n          docs: \"https://internal-docs-for-kit.mycorp.com\"\n          genesis_version_min: 2.8.0\n          use_create_env: yes\n      ```\n\n    - Simple YAML hashmap:  By using a hash-map, you can use spruce\n      operators to take values from the environment yaml hierarchy (though\n      not the full manifest, as that would be a chicken/egg issue with the\n      kit itself).  If you want to use spruce operators against values in\n      the kits `kit.yml` file, use the `defer` operator in front:\n\n      ```\n      kit:\n        overrides:\n          credentials:\n            base:\n              my-secret: (( grab params.my-secret )) # from env.yml\n              old-secret: (( defer concat credentials.base.secret \"-disabled\" )) # from kit.yml\n      ```\n\n    - Array of the above types: By permitting an array, you can apply the\n      changes in layers, or build from hierarchical ancestors\n\n      ```\n      kit:\n        overrides:\n        - |\n          first_stuff: 1\n\n        - second:\n            stuff: also\n\n      ```\n\n      And in an inheritting file:\n\n      ```\n      kit:\n        overrides:\n        - (( append ))\n        - second:\n            stuff: overwritten\n        - |\n          even_more: true\n        ```\n\n## Improved Kit Behaviour\n\n* Improve params handling for use in `new` hook.\n\n  - Support multiline values in keys and arrays in `param_entry`.\n\n  - Echo `param_comment` to screen so the same information that prefaces the\n    value in the env.yml file can be used as an explanatory blurb prior to the\n    prompt.\n\n* Improve decompile-kit\n\n  - Can decompile kit to directories other than ./dev (`--directory <dir>`)\n\n  - Can specify an environment YAML file to identify which kit to decompile,\n    instead of explicitly stating the kit/version.\n\n## Better BOSH Config Management\n\n* Support downloading multiple configs.\n\n  Before, if you specified to download a config type (ie cloud or runtime)\n  without a name, it would download only the unnamed *default* config of that\n  type.  Experience has shown that the more correct interpretation should be\n  to download all configs of that type, and merge them (in the order they are\n  specified in the BOSH director).  The old behaviour can still be used by\n  explicitly stating `default` as the name.\n\n## Messaging / Error Handling / Debugging\n\n* Added stderr output capture for `Genesis::Vault#get`.\n\n  Rather than have the raw safe stderr leak out to the user, we now capture it\n  and write it to the DEBUG stream.\n\n* Improve deploy help output for create-env environments\n\n  There are difference behaviours for create-env environment than from\n  environments deployed via a BOSH director.  This update calls them out\n  and gives instructions on their use.\n  \n* Improved error message when kit.features is incorrectly formed in environment YAML files.\n\n* Better diagnosis messages when running PING in debug mode.\n\n# Bug Fixes\n\n* Kits can now specify required prerequisites via hook.\n\n  Although the prereqs hook was documented, it was only partially\n  implemented.  This commit completes that implementation, so that if\n  `hooks/prereqs` exists in a kit, it will be run prior to usage.\n\n* Fix bug where default config type was lost when fetching configs from BOSH\n  director, resulting in bad messages and error reports.\n\n* Export `GENESIS_EXODUS_MOUNT` to hooks environment.  This was missing from the\n  set of vault path environment variables available to hook scripts.\n\n# Internal Changes/Improvements\n\n## BOSH Refactor\n\n* Add `Genesis::BOSH` for controlling BOSH director.\n\n  This is a major refactor to facilitate better operation and connections\n  to BOSH directors.  Connections to Bosh will use exodus data to\n  determine the corresponding BOSH director address and connection\n  details.\n\n* Set `GENESIS_BOSH_COMMAND` when checking BOSH cmd\n\n  Also removes `check_bosh_version` subroutine that was replaced by\n  `Genesis::BOSH#command`\n\n* Change `needs_bosh_create_env` to `use_create_env`\n\n## Functionality Improvement\n\n* Allow `Genesis::Kit#metadata` to take args.\n\n  If Genesis::Kit#metadata receives no arguments, it will return a hash\n  reference for all metadata for the kit.  If it gets a single value, it\n  returns the metadata corresponding to the key of that value.  Finally,\n  if it gets a list of values, it will return a list of the metadata\n  corresponding to the keys of the given values.\n\n## Efficiencies\n\n* Lazy-load kit provider types as needed.\n\n  By using `require` instead of `use` for loading the\n  `Genesis::Kit::Provider::*` classes, they are loaded as needed during\n  runtime instead of fully loaded at compile-time.\n\n* Memoize `Genesis::Env` `params` and `actual_environment_files`.\n\n## Structure / Maintainability\n\n* Reordered `lib/Genesis/Env.pm`, with folding and grouping.\n\n  This is done to be consistent with the other lib files.  No actual code\n  changed in this release, but the diff is massive because blocks were\n  moved into logical groupings.\n\n* Privatized `Genesis::Env#validate_name`.\n\n  `validate_name` method should only be used internally, so it was renamed\n  `_validate_env_name`.\n\n* Fixes inconsistant private variable naming.\n\n  * `_configs` has been changed to `__configs` in `Genesis::Env`, to match all\n    other private instance variables.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.8.0",
      "version": "2.8.0"
    },
    {
      "notes": "# Bug Fixes\n\n* Genesis v2.8.0 reworked how Genesis interacted with BOSH, getting the\n  login information from exodus data.  However, when the exodus data is\n  not available, it lost its ability to specify the BOSH connectivity\n  via environment variables.  This has now been resolved.\n\n* Fixes error `Can't locate object method \"from_envvars\" via package\n  \"Genesis::BOSH::Director\"` when generating new genesis environment.\n\n* Fixes error when running `genesis bosh -h`, documents how to get help\n  for bosh commands instead of help for `genesis bosh`\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.8.1",
      "version": "2.8.1"
    },
    {
      "notes": "# Bug Fixes\n\n* Replaces error `Can't call method \"execute\" on an undefined value`\n  with more useful information on why BOSH director cannot be accessed.\n\n* Suppress repetitive deprecation messages for the environment when\n  processing various genesis commands.\n\n* The existing bosh wrapper function in Genesis::Helpers was not\n  compatible with the Genesis v2.8 internals regarding BOSH connectivity.\n  If the environment file exists, helpers will simply use `genesis bosh\n  ...` calls to make it Just Work™.  For the rare situation where the\n  enviroment file doesn't exist, a much more complicated validation and\n  connectivity routine is employed.\n\n* When generating the BOSH director for an environment, and is using the\n  environment variables to determine the BOSH director configuration, make\n  sure to set the deployment name.\n\n# Kit Authoring Improvements\n\n* Added `version_check` bash function to check that the version of Genesis\n  meets or exceeds your hook's required version.  If you use this, make sure\n  your kit specifies `genesis_version_minimum` of 2.8.2.\n\n* Improvements to `genesis compile-kit` interface and functionality:\n\n  - Now creates a local rc release when no version is specified, for the\n    next patch level above the highest remote or local version found.\n\n  - Can specify --target|-t to have the compiled kit placed in the\n    desired directory.  If the directory is a genesis repo, it will\n    place it under the directory's .genesis/kits path.\n\n  - When using -v <version>, if that version already exists locally or\n    remotely, it will error out to prevent reissuing different contents\n    under the same version (--force can be used to overcome this\n    limitation).\n\n  - When not specifying the explicit version, you can bump the major or\n    minor version instead of the path by using --major|-M or --minor|-m\n    options.  The --final option will create the next version without a\n    -rc# component.\n\n  - Improved feedback while processing.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.8.2",
      "version": "2.8.2"
    },
    {
      "notes": "This is a prerelease - please see commit messages for changes\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.8.3-rc.4",
      "version": "2.8.3-rc.4"
    },
    {
      "notes": "# Improvements\n\n* Command line can now take the path/env before the subcommand, without\n  using -C.\n\n  Command line can now take the enviornment before or after the command,\n  and no longer needs the -C.  Moving forward in 3.0, the preference will\n  be prefix instead of postfix, and the -C option will be dropped.\n\n  Unlike the postfix method, the prefix method can take a path component.\n  Unlike the -C option, the `.yml` doesn't need to be included (unless it\n  is ambiguous, such as your file is named the same as a genesis command).\n\n  Before:\n  ```\n  genesis -C ../alt/path deploy my-env\n  ```\n\n  Now:\n  ```\n  genesis ../alt/path/my-env deploy\n  ```\n\n  Before:\n  ```\n  genesis -C deploy-dir/env.yml deploy\n  ```\n\n  Now:\n  ```\n  genesis deploy-dir/env deploy\n  ```\n\n* User is now notified if the local kit version has changed from what\n  was deployed when running `genesis info`\n\n# Bug Fixes\n\n* With the changes in 2.8.2, a quazi-regression was introduced regarding\n  BOSH targeting.  If the BOSH environment variables were set in an\n  environment, Genesis would use those to target the BOSH director\n  instead of what was specified in the environment file.\n\n  The target BOSH and the manner in which it is targeted has been in\n  flux for a number of years.  Genesis 2.8.x was meant to unify this,\n  but there are multiple edge cases that we've worked through, and a lot\n  of habits that need to be unlearned.  The following is the intended\n  best practices, that if followed, will keep you out of trouble.\n\n  * Whenever possible, use `genesis bosh <env> <bosh opts and args>` to\n    interact with the BOSH deployment associated with <env>.  There\n    should be very little technical reasons to not use this method.\n\n    **UNLEARN:**\n    > Genesis is 'deployment-focused', while the BOSH cli is\n    'director-focused'.  When you target a Genesis environment file, you\n    need to stop thinking about which director you are using, but which\n    deployment you care about; Genesis will figure out the associated\n    BOSH director to talk to.  One of the reasons for this paradigm\n    change is so users that have access to a deployment's env file, but\n    not the corresponding bosh deployment's repo can still access the\n    BOSH director needed to manage their deployment.\n\n  * If you need to access a Genesis deployment AS a BOSH director, use\n    the -A option.  This will tell Genesis that the target environment\n    contains the connection details for the BOSH director, not its\n    parent.  It will also not set the -d|--deployment option.\n\n    Example: `genesis bosh -A <env> <bosh opts and args>`\n\n  * If you need to use the BOSH cli directly, you have two choices, each\n    somes with side effects:\n\n    * Set the environment variables to connect to bosh.  This is what\n      Genesis does internally, but if you do this, be aware that it\n      lasts for the lifetime of the shell you are in, which can lead to\n      unexpected side-effects.  You can do this by running\n\n      `eval \"$(genesis bosh --connnect [-A] <env>)\"`\n\n      where the optional -A specifies use <env> as the director instead\n      of the deployment.\n\n      You can also use the bosh-genesis-kit's `printenv` addon, if you\n      have access to that deployment environment file.  While it is more\n      powerful, including support for socks5 proxy, it also impacts the\n      shell more.  See the bosh kit for more details.\n\n    * Use BOSH alias configuration and log in (daily) using the bosh\n      deployment configuration.  This is the method Genesis used prior\n      to v2.8.0, and still works if you're using bosh-genesis-kit v2.2.0\n      or greater, and bosh-cli 6.4.4 or greater.  This has the advantage\n      of needing to be explicitly stated with the -e option on the bosh\n      call, and allowing multiple bosh directors to be authenticated\n      against at the same time.  The down side is you'll need to\n      re-authenticate periodically.\n\n  **NOTE:** If you have the BOSH environment variables set, Genesis will\n  now ignore them when operating on a genesis deployment environment,\n  but will issue a warning that it is doing so.  The environment's\n  explicitly or implicitly specified bosh environment will be used.\n\n* Fixes outdated references to pre-2.8 BOSH library calls.\n\n* Resolves runtime error message when not specifying kit on `genesis init`\n\n* Resolves runtime error message for unspecified `use_create_env` property (2.8.0 feature)\n\n* Correctly allows recreation of existing kits with --force option in compile-kit\n\n* Fixes some internal kit hook bash wrappers around genesis callbacks\n\n* Fixes race condition when creating a new bosh enviornment where it\n  doesn't know the bosh director or if it is a proto bosh or not before\n  it asks for those values.\n\n* Reverts a change in v2.8.2, which would set the enviornment variable\n  used internally and by the hooks to use the BOSH direcctor identified\n  by BOSH_ENVIRONMENT.  The normal environment variable to do this is\n  GENESIS_BOSH_ENVIRONMENT, but the previous change erroneously also\n  included BOSH_ENVIRONMENT as a source for setting the BOSH director.\n\n* Fixed bug `Can't locate object method \"base_url\" via package \"Genesis::Kit::Provider::GenesisCommunity\"`\n  that occurred when `genesis repipe` was run\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.8.3",
      "version": "2.8.3"
    },
    {
      "notes": "# Bug Fixes\n\n* Manifests that contained values with percent signs were causing Genesis\n  failures.  This has been resolved.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.8.4",
      "version": "2.8.4"
    },
    {
      "notes": "# Improvements\n\n* Added `genesis lookup --env` to retrieve environment variable values\n  used by Genesis for the specified environment.  Like all lookup\n  commands, '.' will return everything in JSON format, single value will\n  be returned as an unquoted string, and default if specified, will be\n  returned if environment variable specified doesn't exist.\n\n* Added `--no-bosh` and `--no-vault` to `genesis env-shell` command, so\n  that you can access a shell without forcing connections to those\n  services.\n\n* Fixed output of `genesis env-shell` so that the preamble header\n  doesn't go to stdout.  This better allows running a user-provided\n  executable as a shell (`--shell path/to/executable` option) to run\n  arbitrary commands inside \"Genesis-space\", then capturing its output.\n\n* Added `-p|--pre` flag to `genesis update` to allow checking for or\n  upgrading to prereleases.\n\n* `genesis decompile-kit` can now take just the kit name or version.\n  Specifying the name will decompile the latest local version, and\n  specifying the version doesn't need the kit name if its unambiguous.\n\n* The version can handle the v prefix in `genesis decompile-kit`\n\n* You can specify `latest` as the argument if only one kit type is in\n  use (which is the way Genesis is designed to function)\n\n* Show the version of Genesis when doing a deploy; helps with diagnoses\n  when user submits deploy output when encountering an error.\n\n# Bug Fixes\n\n* Ignore any 'v' prefix when specifying the version in `genesis\n  compile-kit`\n\n* Fixes issues encountered when creating new environments based on the\n  `bosh` Genesis kit.  This also removed the confusing `bosh_env: --`\n  entry under `genesis` in environment yml files.\n\n* Future-proofing for creating new environments based on\n  bosh-genesis-kit v3.0.0 (--[no-]create-env option to `genesis new`)\n\n* Improved error messages for create-env/bosh_env conflicts.\n\n* `genesis new` now supports environment-first call style, allowing\n  users to type `genesis <env> new ...` to create the new environment.\n\n* Fixes another issue with `genesis new` when `genesis bosh --connect`\n  has been used in the terminal session.\n\n* `genesis new` will explicitly prune `genesis.bosh_env` when making a\n  new create-env based (aka proto) environment.\n\n* When preparing exodus data after deploy, properly handle undefined\n  values.\n\n* The `genesis bosh` command now runs in the users calling directory, so\n  relative paths to files work as expected.\n  \n* Fixed bug where some systems could not validate SSH keys due to \n  permission issues with here-strings.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.8.5",
      "version": "2.8.5"
    },
    {
      "notes": "# Improvements\n\n* Clarified create-kit help description regarding the -n option to indicate\n  that it automatically adds \"-genesis-kit\" suffix\n  \n* The generated scaffolding now has the base manifest default to use bionic stemcells\n\n* `genesis bosh` now supports all the basic options, including\n  --[no-]color, -q|--quiet, -D|--debug, -T|--trace, and -S|--show-stack.\n\n* Add the yaml files used during the check process of deployment.  This\n  is especially useful when running deployments in pipelines, and when\n  running the spec tests.  To enable it, set the environment variable\n  GENESIS_CHECK_YAML_ON_DEPLOY to a truthy value (1, yes, true, Y) and\n  export it (or set it in params section of the deploy task).\n\n* Add pre-deploy and post-deploy reactions on a per-environment basis.\n\n  Sometimes different environments need to perform tasks prior to and\n  after doing a deploy.  This feature allows you to specify scripts that\n  will be run in those circumstances.  Add the following structure to\n  your environment file:\n\n  ````\n  genesis:\n    reactions:\n      pre-deploy:\n        - script: put-up-maintenance-page\n        - script: update-jira\n          args:   [ 'some-argument', '$SOME_ENV_VAR' ]\n      post-deploy:\n        - addon: valid-addon-for-kit\n        - script: remove-maintenance-page\n  ````\n\n  The scripts are located in the bin/ dir under the repository root\n  directory, and are propagated via the pipeline cache system.\n\n  The scripts have access to the following environment variables:\n\n  * GENESIS_PREDEPLOY_DATAFILE -- file path that contains any data\n    gathered by the predeploy hook\n\n  * GENESIS_MANIFEST_FILE -- file path to the full unredacted unpruned\n    manifest for the current deployment\n\n  * GENESIS_BOSHVARS_FILE -- file path to any BOSH variables for the\n    deployment\n\n  * GENESIS_DEPLOY_OPTIONS -- JSON representation of the options passed\n    to the deploy call\n\n  * GENESIS_DEPLOY_DRYRUN -- \"true\" if the deployment is a dry-run,\n    \"false\" otherwise\n\n  * GENESIS_DEPLOY_RC -- return code of the BOSH deploy call.  0 if\n    successful, 1 otherwise.  Only available for post-deploy reactions\n\n* You can now specify where your alternative BOSH director's credentials\n  can be found.\n\n  By convention, your BOSH environment (the director you are using to\n  deploy your environment) is the same name as the environment you are\n  deploying, and its credentials are stored in `exodus` in the same\n  vault.\n\n  This isn't possible when what you're deploying is another BOSH\n  director, so Genesis has always made it possible to specify another\n  BOSH environment alias, via the `genesis.bosh_env` parameter, and\n  before that, via the `params.bosh` in the bosh kit.\n\n  Furthermore, if you deployed your BOSH director with a non-standard\n  kit, you could specify that deployment-type as such:\n  `<alias>/<deployment-type>`.  By default, that deployment type is\n  `bosh`\n\n  When v2.8.0 came around, we started storing access for the credentials\n  to the BOSH director in vault.  While we always recommend using a\n  single vault for all deployments in your deploy repo, some companies\n  have policies that don't allow that.  To this end, you can now specify\n  which vault and exodus base path under which your BOSH director\n  credentials can be found.  This extends `genesis.bosh_env` with the\n  following pattern:\n\n  ```\n  <alias>[/<deployment-type>][@[http(s?)://<host>[:<port]/]<base-path>]\n  ```\n\n  We still recommend a single vault and single exodus base path whenever\n  possible, as most of the existing kits that use exodus data do not\n  have the ability to specify an alternative vault or path.  This simply\n  allows the layering of nested BOSHes to work within the confines of\n  corporate security policies.\n\n* Adds a `--fix-releases` option to deployment for when you need to re-upload\n  a bosh release.  This is rarely needed, mainly if you change the underlying\n  stemcell to a new OS.\n\n* Support --recreate-persistent-disks on deploy for both deploy and\n  create-env environments.\n\n* `genesis decompile-kit` will now accept file with .yml suffix\n\n# Kit Authoring Improvements\n\n* Added print_addon_descriptions and run_extended_addon helpers to\n  support extended addon scripts.\n\n  Rather than have all the addons in the `hooks/addon` file, you can add\n  individual `hook/addon-<name>~<shortcut>`.  To do so, you need to\n  follow the following conventions:\n\n  * The script gets passed as its first argument the action to take.\n    This is either help or run.  Help prints out the description to be\n    used in list, and run causes the script to run.\n\n  * The main hooks/addon script must use print_addon_descriptions in its\n    list command block, with alternative arguments of the base commands\n    and descriptions.  Example:\n\n    ```\n    list) print_addon_descriptions \\\n            \"command\" \"description of command\" \\\n            \"another\" \"description of another command\" ;;\n    ```\n\n  * The main hook/addon script uses run_extended_addon as its catch-all\n    `*)` block.\n\n* You can now find more genesis environment information in the manifest.\n  In addition to the existing keys under `genesis.`, you can now find\n  the vaultified environment (dashes into slashes) in\n  `genesis.vault_env`, and the full path for the secrets and exodus\n  base: `genesis.secrets_base` and `genesis.exodus_base` respectively.\n  `genesis.secrets_base` is the same value as `meta.vault` but with the\n  trailing `/`.\n\n# Bug Fixes\n\n* When using legacy secrets provider, if the current safe target has the\n  same URL as another safe target, a confusing error would be printed.\n  This change provides a much more informative error message.\n\n* When using a specified secrets provider for a deployment repo, a more\n  instructive error message is provided when multiple safe targets with\n  the same URL is specified.\n\n* Genesis doesn't like the `https_proxy` or `HTTPS_PROXY` environment\n  variables being set, but BOSH was happy when they were set to \"\".\n  However, upstream BOSH now considers that an error, so Genesis is\n  going to simply unset them.\n\n  If you need to use HTTPS proxy, you can still set `GENESIS_HONOR_ENV`\n  to a truthy value, and it will keep `HTTPS_PROXY` and `https_proxy`\n  environment variables from the calling scope, but only do this if\n  you encounter an error.\n\n* No longer errors when running `genesis version` if prerequisites are\n  missing (the lone exception of course is if perl itself is missing)\n\n* Clearing of the secrets provider (`genesis secrets-provider --clear`)\n  now works.  This puts genesis in \"Legacy Mode\", meaning it will use\n  whatever your current safe target is as the source for your genesis\n  secrets.  Not recommended, but there are specific use cases that\n  required it (for now).\n\n* Support --recreate for create-env environments.  This was already\n  supported for deploy-based environments, but was erroneously denied\n  for create-env based environments (ie proto-bosh)\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.8.6",
      "version": "2.8.6"
    },
    {
      "notes": "# Bug Fixes\n\n* For vaults that have different secrets mount, you can set\n  VAULT_SECRETS_MOUNT in the pipeline job to specify an alternative\n  location where the secrets are found.  This fixes the issue where the\n  pipeline can't authenticate to vault because it can't find handshake\n  secret under /secrets/\n\n* Pipeline fixes to authenticate to the vault when running errands\n\n# Improvements\n\n* Pipeline jobs can now use email for status notifications.\n\n* Pipeline can now specify an alternative image registry for resources\n  and workers, for supporting closed networks.  Supports both insecure\n  and authentication by username/password.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.8.7",
      "version": "2.8.7"
    },
    {
      "notes": "# Bug Fixes\n\n* Fix issue with pipeline's show-changes task that was due to missing\n  the BOSH environment.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.8.8",
      "version": "2.8.8"
    }
  ],
  "latest": "2.8.8"
}
