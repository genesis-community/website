{
  "all": [
    {
      "notes": "# Improvements\n\n* Improved lookup command to be able to handle accessing array elements by\n  index or by element hash match (ie `myarray[somekey=specific-value]`)\n\n# Bug Fixes\n\n* Restored `vaulted()` subroutine: fixes error in `vault_path` and \n  `vault_path_and_key`  validation.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.5",
      "version": "2.6.5"
    },
    {
      "notes": "# Bug Fixes\n\n* Fixed bug with some older kits validating against vault paths and keys.\n\n* `genesis do ...` message of \"Running <addon> addon for <env>\" now prints to\n  STDERR so addon output can be safely piped to other commands.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.6",
      "version": "2.6.6"
    },
    {
      "notes": "# Bug Fixes\n\n- Handle proxy-injected headers when downloading assets via curl.\n  Some proxies will give back provisional, non-3xx responses to\n  indicate that they are connecting to the requested resource.\n  This no longer confounds genesis.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.7",
      "version": "2.6.7"
    },
    {
      "notes": "# Improvements\n\n- Certificates in kit.yml can now have subject alt names that\n  are optional, using the new `${maybe:params.name}` syntax.\n  If `params.name` isn't found in the environment file(s) then\n  that SAN entry will be skipped entirely.\n\n  This allows Kit Authors to generate certificates with\n  user-provided external domains, optionally.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.8",
      "version": "2.6.8"
    },
    {
      "notes": "# Bug Fixes\n\n- `genesis embed` now properly handles packed (2.6+) genesis\n  distributions, and instead of just copying the extracted driver\n  script, now embeds the packed archive binary.  This makes the\n  pipelines a lot happier.\n\n- `genesis repipe` now properly hides / unhides pipelines per\n  configuration.  All this talk of pipelines and we misspelled\n  piepline.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.9",
      "version": "2.6.9"
    },
    {
      "notes": "# Bug Fixes\n\n- Accessing a Vault over HTTP/2 now works. Previously our regex was strictly\n  checking for HTTP/x.x connections. We've losened it to look for HTTP/x.x or\n  HTTP/x.\n\n- Genesis concourse pipelines now downloads the cloud configuration from the\n  bosh director. Previously, pipelines would fail to deploy because the deploy\n  didn't have a cloud-config to base spruce merges off of.\n\n- Genesis now ensures that `GENESIS_CALLBACK_BIN` is a fully-qualified path.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.10",
      "version": "2.6.10"
    },
    {
      "notes": "# Improvements\n\n* Kits can now check that the required number of static_ips in each network\n  are available using the `cloud_config_needs static_ips <network_name>\n  <count>`\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.11",
      "version": "2.6.11"
    },
    {
      "notes": "# Bug Fixes\n\n- CI pipelines no longer bail out when trying to determine their\n  BOSH alias, because of some unfortunate interactions.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.12",
      "version": "2.6.12"
    },
    {
      "notes": "# Feature: Better Integration of Safe\n\nSince inception, Genesis has used your local `safe` target to determine what\nvault is being used for the environment secrets.  If you only have a single\nvault, this is fine.\n\nHowever, some systems have multiple `safe` targets, and if you switch targets,\nyou may inadvertantly try to use a vault where your environment's targets are\nnot located, or worse, write, delete or overwrite secrets in the wrong\nvault.\n\nFurthermore, when repositories are used on more than one system, there is no\nmechanism to convey what `safe` target needs to be used for that repository.\n\nAs of this release, you can now _register_ the correct vault with a deployment\nrepository, so that it always uses that vault, regardless of what the local\nsafe configuration has as the target.\n\nTo provide this behaviour, the following changes have been made:\n\n- `genesis init` will ask for the user to select a vault from their safe\n  targets list.  Alternatively, the correct safe target can be passed in via\n  the --vault <target> option.\n\n- `genesis new` no longer prompts for the vault when creating a new\n  environment.\n\n- When using a repository on a new system, if the registered vault is not\n  known, or if there are multiple targets for the registered vault url,\n  instructions will be provided instructing the user how to ensure the\n  correct vault is available.\n\n- To view and manage what vault is registered, the `genesis secrets-provider`\n  command is used.  Without any arguments it displays the status of the\n  registered vault.\n\n```\n$ genesis secrets-provider\n\nSecrets provider for concourse deployment at /path/to/concourse-deployments:\n         Type: Safe/Vault\n          URL: http://127.0.0.1:8201 (insecure)\n  Local Alias: toughened-coffer\n       Status: ok\n```\n\n  With the -i|--interactive option, it will provide you with the same menu of\n  valid safe targets that is presented when creating a new repository.  The\n  selected target will then be registered to the repository.  Similarly, you\n  can skip the menu and just specify the target name or full url as an\n  argument.\n\n  Finally, the -c|--clear option can be used to remove the registered safe,\n  and put the deployment repository in Legacy mode.  While this is highly not\n  recommended, if you **need** to use the old model of relying on the system-\n  targetted safe, this can be used.\n\n- The deployment repository configuration file `.genesis/config` is updated\n  when `genesis secrets-provider` is called with an argument, and should not\n  be edited by hand.  If there is a use-case for need to change this file\n  manually, please open an issue.\n\n- You must have at least one safe target with a unique url.  Normally, when\n  initially deploying your first BOSH and Vault using genesis, you will stand\n  up a local vault using `safe local -m`, then once the permanent Vault is in\n  place, you will move your secrets to that Vault, and then update your\n  registered secrets provider to point to the permanent Vault.\n\n  More information on the design of and reason for this change can be found at\n  https://trello.com/c/n4WhOC6p\n\n**Note on Legacy Mode:**\n\nAll existing deployment repositories will run in Legacy mode until you use\n`genesis secrets-provider` to register a vault with them.  While in Legacy\nmode, the --vault option is valid for the `new`, `check-secrets`, `add-secrets`,\n`rotate-secrets` and `secrets` subcommands to specify the safe target you want\nto use.  The `new` subcommand will error if in Legacy mode and no `--vault`\noption is provided.  All other command will use whatever the current vault\nbeing used by the system for determining what vault to access.\n\n**Note on valid safe targets:**\n\nFor a safe target to qualify for a registered vault, it must be the\nonly target that uses its url (this is due to how safe associates the\nauthentication token).  If you have multiple aliases for a given URL, remove\nthe duplicates, or if you need separate alais, use /etc/hosts to create unique\ndomain names that can be used as the host.\n\n# Improvements\n\n- Creating new environment will now warn you that existing secrets exist under\n  the path set for the environment.  You will then be prompted to allow them\n  to be deleted, or abort the creation of the environment.  This serves two\n  purposes: It informs you in case you're accidentally about to overwrite\n  existing secrets, and ensures there are no out-dated secrets left around in\n  the case that you intended to over-write them.\n\n- Reorganized environment file for future improvements.  Introduced new\n  `genesis` top-level key to hold Genesis-level values, leaving `params` for\n  kit-level values.  This moves `params.env` to `genesis.env`, and\n  `params.vault` to `genesis.secrets_path`.  Existing kits that make use of\n  `params.env` will continue to be supported (see below in Kit Authorship\n  Improvments)\n\n- `genesis download` is now `genesis fetch-kit`, and supports fetching new\n  versions of local kits without having to specify any arguments.\n\n- Cleaned up check and deployment interface to move towards a more standardized\n  output.\n\n- BOSH connection checks now first check if the host and port are reachable\n  and listening rather than hanging while attempting to connect.\n\n# Kit Authorship Improvements\n\n- Improved validation when compiling kits.\n\n  **Breaking Change:**  `genesis compile-kit` will now error if you are using\n  legacy keywords in your kit.yml, such as `subkits` and `params`.  If you are\n  maintaining a legacy kit and need to compile a new version, you may use the\n  `-f` option to force the compilation, but be warned, this will bypass all\n  the validation.  It is recommended instead to bring your kit up to the\n  latest standards.\n\n- Kit's `genesis_version_minimum` now means both _I need this version of\n  Genesis_ (original intention) as well as _I fully support this verison of\n  Genesis._ This means it can be used to deprecate or protect from deprecation\n  features that are introduced in new versions of Genesis.\n\n  For example, kits that don't specify a `genesis_version_minimum` of 2.6.13\n  will not be expected to support the new `genesis.env` environment parameter,\n  so Genesis will auto-populate the `params.env` for them, ensuring that any\n  reliance on this does not break existing kits.\n\n- Added `genesis_config_block` helper to print the `genesis:` block to standard\n  output, so it can be redirected into the environment file being constructed\n  by the `new` hook.  Use this instead of constructing it yourself to ensure\n  future compatability without having to update your kit (further changes in\n  this area are coming).\n\n- Added `bullet` hooks helper to print green checkmark (`bullet \"√\"`) or red X\n  (`bullet \"x\"`) in the same style that `genesis check-secrets` uses.\n\n- `prompt_for line` helper can now accept an empty response by using the\n  `--default ''` option.\n\n- Improved `cloud_config_needs`:\n\n  - Now uses same green checkmark/red x that check-secrets uses. _(uses\n    `bullet` helper above)_\n\n  - `static_ip` checks for both valid static ip ranges as well as sufficient\n    counts.\n\n- Added the following environment variables for use in hooks:\n\n  - `SAFE_TARGET` - while not to be directly used, this ensures all safe calls\n  will target the environments registered vault.\n\n  - `GENESIS_TOPDIR` - for kits that alter $HOME, this will point back to the\n    Genesis top directory (usually ~/.geese) even after $HOME is changed.\n\n# Kit Deprecations\n\n- Setting your kit to use `genesis_version_minimum` of 2.6.13 (or higher) have\n  the following changes.\n\n  - The root path, env name and vault prefix will no longer be provided as\n    positional arguments to the `hooks/new` script.  Instead, the script must\n    make use of the `GENESIS_ROOT`, `GENESIS_ENVIRONMENT`, and\n    `GENESIS_SECRETS_PATH` environment variables respectively.\n\n  - `params.env` will no longer be provided in the environment file stack.\n\n# Bug Fixes\n\n- `genesis deploy` checks presence of secrets prior to trying to build a\n  manifest\n\n- CA Certs specified in kits honour `valid_for` and `names` properties.  Names\n  are added as Subject Alternative Names.\n\n- Fixed error in minimum Genesis version specification in generated template\n  and validation.\n\n# Developer Support\n\n- Improved output for trace and debug output so its move visually obvious.\n\n- Added `dump_var` function that will dump the contents of one or more\n  variables when in debug or trace mode (as per Data::Dumper)\n\n- Added `dump_stack` function that will dump the stack trace when in debug or\n  trace mode.\n\n- Trace and debug output will always be in color, even if redirect.  To turn\n  off color, use --no-color or set NOCOLOR environment variable to 'y'\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.13",
      "version": "2.6.13"
    },
    {
      "notes": "# Improvements\n\n- `prompt_for` not treats any non-option arguments as individual lines, making\n  it easy to have multiple-line prompts in BASH.\n\n# Bug Fixes\n\n- Temporary directory for `offer_environment_editor` helper now works on Linux\n- Fixed misnamed method call in `ci-pipeline-deploy`\n- Updated ci pipeline to resolve cyclic runaway on rc version bumps\n\n# Software Updates\n\n- Bumped dependency on `spruce` to 1.20.0 to support kv v2 backends.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.14",
      "version": "2.6.14"
    },
    {
      "notes": "# Feature: Better Integration of Safe\n\nSince inception, Genesis has used your local `safe` target to determine what\nvault is being used for the environment secrets.  If you only have a single\nvault, this is fine.\n\nHowever, some systems have multiple `safe` targets, and if you switch targets,\nyou may inadvertantly try to use a vault where your environment's targets are\nnot located, or worse, write, delete or overwrite secrets in the wrong\nvault.\n\nFurthermore, when repositories are used on more than one system, there is no\nmechanism to convey what `safe` target needs to be used for that repository.\n\nAs of this release, you can now _register_ the correct vault with a deployment\nrepository, so that it always uses that vault, regardless of what the local\nsafe configuration has as the target.\n\nTo provide this behaviour, the following changes have been made:\n\n- `genesis init` will ask for the user to select a vault from their safe\n  targets list.  Alternatively, the correct safe target can be passed in via\n  the --vault <target> option.\n\n- `genesis new` no longer prompts for the vault when creating a new\n  environment.\n\n- When using a repository on a new system, if the registered vault is not\n  known, or if there are multiple targets for the registered vault url,\n  instructions will be provided instructing the user how to ensure the\n  correct vault is available.\n\n- To view and manage what vault is registered, the `genesis secrets-provider`\n  command is used.  Without any arguments it displays the status of the\n  registered vault.\n\n```\n$ genesis secrets-provider\n\nSecrets provider for concourse deployment at /path/to/concourse-deployments:\n         Type: Safe/Vault\n          URL: http://127.0.0.1:8201 (insecure)\n  Local Alias: toughened-coffer\n       Status: ok\n```\n\n  With the -i|--interactive option, it will provide you with the same menu of\n  valid safe targets that is presented when creating a new repository.  The\n  selected target will then be registered to the repository.  Similarly, you\n  can skip the menu and just specify the target name or full url as an\n  argument.\n\n  Finally, the -c|--clear option can be used to remove the registered safe,\n  and put the deployment repository in Legacy mode.  While this is highly not\n  recommended, if you **need** to use the old model of relying on the system-\n  targetted safe, this can be used.\n\n- The deployment repository configuration file `.genesis/config` is updated\n  when `genesis secrets-provider` is called with an argument, and should not\n  be edited by hand.  If there is a use-case for need to change this file\n  manually, please open an issue.\n\n- You must have at least one safe target with a unique url.  Normally, when\n  initially deploying your first BOSH and Vault using genesis, you will stand\n  up a local vault using `safe local -m`, then once the permanent Vault is in\n  place, you will move your secrets to that Vault, and then update your\n  registered secrets provider to point to the permanent Vault.\n\n  More information on the design of and reason for this change can be found at\n  https://trello.com/c/n4WhOC6p\n\n**Note on Legacy Mode:**\n\nAll existing deployment repositories will run in Legacy mode until you use\n`genesis secrets-provider` to register a vault with them.  While in Legacy\nmode, the --vault option is valid for the `new`, `check-secrets`, `add-secrets`,\n`rotate-secrets` and `secrets` subcommands to specify the safe target you want\nto use.  The `new` subcommand will error if in Legacy mode and no `--vault`\noption is provided.  All other command will use whatever the current vault\nbeing used by the system for determining what vault to access.\n\n**Note on valid safe targets:**\n\nFor a safe target to qualify for a registered vault, it must be the\nonly target that uses its url (this is due to how safe associates the\nauthentication token).  If you have multiple aliases for a given URL, remove\nthe duplicates, or if you need separate alais, use /etc/hosts to create unique\ndomain names that can be used as the host.\n\n# Improvements\n\n- Creating new environment will now warn you that existing secrets exist under\n  the path set for the environment.  You will then be prompted to allow them\n  to be deleted, or abort the creation of the environment.  This serves two\n  purposes: It informs you in case you're accidentally about to overwrite\n  existing secrets, and ensures there are no out-dated secrets left around in\n  the case that you intended to over-write them.\n\n- Reorganized environment file for future improvements.  Introduced new\n  `genesis` top-level key to hold Genesis-level values, leaving `params` for\n  kit-level values.  This moves `params.env` to `genesis.env`, and\n  `params.vault` to `genesis.secrets_path`.  Existing kits that make use of\n  `params.env` will continue to be supported (see below in Kit Authorship\n  Improvments)\n\n- `genesis download` is now `genesis fetch-kit`, and supports fetching new\n  versions of local kits without having to specify any arguments.\n\n- Cleaned up check and deployment interface to move towards a more standardized\n  output.\n\n- BOSH connection checks now first check if the host and port are reachable\n  and listening rather than hanging while attempting to connect.\n\n# Kit Authorship Improvements\n\n- Improved validation when compiling kits.\n\n  **Breaking Change:**  `genesis compile-kit` will now error if you are using\n  legacy keywords in your kit.yml, such as `subkits` and `params`.  If you are\n  maintaining a legacy kit and need to compile a new version, you may use the\n  `-f` option to force the compilation, but be warned, this will bypass all\n  the validation.  It is recommended instead to bring your kit up to the\n  latest standards.\n\n- Kit's `genesis_version_minimum` now means both _I need this version of\n  Genesis_ (original intention) as well as _I fully support this verison of\n  Genesis._ This means it can be used to deprecate or protect from deprecation\n  features that are introduced in new versions of Genesis.\n\n  For example, kits that don't specify a `genesis_version_minimum` of 2.6.13\n  will not be expected to support the new `genesis.env` environment parameter,\n  so Genesis will auto-populate the `params.env` for them, ensuring that any\n  reliance on this does not break existing kits.\n\n- Added `genesis_config_block` helper to print the `genesis:` block to standard\n  output, so it can be redirected into the environment file being constructed\n  by the `new` hook.  Use this instead of constructing it yourself to ensure\n  future compatability without having to update your kit (further changes in\n  this area are coming).\n\n- Added `bullet` hooks helper to print green checkmark (`bullet \"√\"`) or red X\n  (`bullet \"x\"`) in the same style that `genesis check-secrets` uses.\n\n- `prompt_for line` helper can now accept an empty response by using the\n  `--default ''` option.\n\n- Improved `cloud_config_needs`:\n\n  - Now uses same green checkmark/red x that check-secrets uses. _(uses\n    `bullet` helper above)_\n\n  - `static_ip` checks for both valid static ip ranges as well as sufficient\n    counts.\n\n- Added the following environment variables for use in hooks:\n\n  - `SAFE_TARGET` - while not to be directly used, this ensures all safe calls\n  will target the environments registered vault.\n\n  - `GENESIS_TOPDIR` - for kits that alter $HOME, this will point back to the\n    Genesis top directory (usually ~/.geese) even after $HOME is changed.\n\n# Kit Deprecations\n\n- Setting your kit to use `genesis_version_minimum` of 2.6.13 (or higher) have\n  the following changes.\n\n  - The root path, env name and vault prefix will no longer be provided as\n    positional arguments to the `hooks/new` script.  Instead, the script must\n    make use of the `GENESIS_ROOT`, `GENESIS_ENVIRONMENT`, and\n    `GENESIS_SECRETS_PATH` environment variables respectively.\n\n  - `params.env` will no longer be provided in the environment file stack.\n\n# Bug Fixes\n\n- `genesis deploy` checks presence of secrets prior to trying to build a\n  manifest\n\n- CA Certs specified in kits honour `valid_for` and `names` properties.  Names\n  are added as Subject Alternative Names.\n\n- Fixed error in minimum Genesis version specification in generated template\n  and validation.\n\n# Developer Support\n\n- Improved output for trace and debug output so its move visually obvious.\n\n- Added `dump_var` function that will dump the contents of one or more\n  variables when in debug or trace mode (as per Data::Dumper)\n\n- Added `dump_stack` function that will dump the stack trace when in debug or\n  trace mode.\n\n- Trace and debug output will always be in color, even if redirect.  To turn\n  off color, use --no-color or set NOCOLOR environment variable to 'y'\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.13",
      "version": "2.6.13"
    },
    {
      "notes": "# Bug Fixes\n\n- Fixes code-order bug in `ci-pipeline-deploy` that was introduced in v2.6.13\n  that caused an invalid `.saferc` that was missing the vault token to be used\n  in the pipeline.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.15",
      "version": "2.6.15"
    },
    {
      "notes": "# Bug Fixes\n\n- Fixes error in ci-pipeline-deploy when skip verify is false\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.16",
      "version": "2.6.16"
    },
    {
      "notes": "# Administrative Release Only\n\nThere are no functional changes in this release.  It is a re-release to\njumpstart some CI/CD pipelines that have a hard time repacking old versions of\nthings; we changed GitHub orgs and it confused that particular pipeline\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.17",
      "version": "2.6.17"
    },
    {
      "notes": "# New Feature: groups in pipeline config\n\nIt supports grouping in pipeline config file, `genesis repipe` will generate groups\naccordingly.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.6.18",
      "version": "2.6.18"
    },
    {
      "notes": "# Improvements\n\n* Add provided secrets handling for provided secrets\n    \n  Users can now manage provided secrets via the `*-secrets` commands.\n  Provided secrets are those secrets that are not generated, but asked for\n  in the `genesis new` process.  A `genesis remove-secrets --all` will\n  remove them.  Copying an environment file to a new name and running\n  `add-secrets` wouldn't populate these, and `check-secrets` wouldn't\n  detect that they were missing.  That's no good!\n\n  This is now fixed.\n\n  * `check-secrets` now reports on their presence or absence\n  * `add-secrets` and `rotate-secrets` now propts for values to be stored.\n  * `remove-secrets` can now remove them\n\n  Support for this functionality must be provided per kit, which requires\n  a new top-level section in `kit.yml`: `provided`\n\n  The structure is thus:\n\n  ```\n  provided:\n    <\"base\"||feature-name>:\n      <path>:\n        [type: 'generic']\n        keys:\n          <key1>:\n            [prompt: \"informational discription of the source or purpose of the value\"]\n            [sensitive: true|false]\n          [<key2>: ...]\n      [<path2: ...]\n    [<feature2>: ...]\n  ```\n\n  `prompt` if not given defaults to \"Value for <path> <key>\" so its best to\n  provide one, but not fatal if you don't.\n\n  `sensitive` defaults to true - this means the input will be hidden and\n  confirmed with a second entry.  The user's input will be displayed if\n  false.\n\n* Better dev kit identity\n\n  While a dev kit's name and version are stuck being dev and latest for\n  legacy reasons, the dev kits id has been updated to reflect whatever\n  name and version are found in the dev kit's kit.yml, with a \"(dev)\" flag\n  tacked on the end.  If there is no name or version, the values of\n  \"unknown\" and \"in-development\" are used as filler respectively.  This\n  gives the user a better idea of what class of kit they are dealing with\n\n  In order to use this value in hooks, $GENESIS_KIT_ID was made available.\n\n\n* Add `bail` hook helper\n\n  The internal `__bail` function was being used in hooks, and was being called\n  `bail`, `_bail`, and `__bail`.  This formalizes the function as `bail` and\n  approves it as an externally callable function.\n\n* In interest of providing no more and no less information than is wanted,\n  users can now set `$GENESIS_SHOW_BOSH_CMD` to a non-empty value to see the\n  bosh command being called from any helper.  If this is deemed valuable, it\n  will be extended to internal Genesis calls to BOSH as well (which are\n  currently available via the -D/-T options as part of the debug/trace logs.)\n\n* Improved `humanize_path` for some corner cases.\n\n* Provide `humanize_path` as a helper function, and `$GENESIS_CALL` as a\n  contained `<bin_path> -C <env_path>`, with the `-C` part only specified if\n  needed.  This is for cut-and-pastable output from helpers like info,\n  post-deploy, new, and addon routines.\n\n\n# Bug Fixes\n  \n* Fixed filter bug when only paths were set.\n\n* Version check for compile-kit to ensure this version of genesis is new\n  enough to know how to compile a kit based on its `genesis_version_min`\n\n* Fix path/bin issues with output\n\n  * Fix ../mydir when getting humanize path of mydir when in mydir\n\n  * Ensure executables always have a path component.\n    * caveat: `humanize_bin` will drop the path component if the genesis\n      binary is in the path and that is the binary being used.  If its the\n      same name as the binary in the path, but was run from a different\n      location, it keeps the location (ie you'll still get ./genesis if\n      you called it that way and your in a path different than where your\n      path genesis resides.)\n\n  * Fixed conflated `$GENESIS_CALLER_DIR` and `$GENESIS_ROOT` usage.\n    `$GENESIS_CALLER_DIR` is where genesis was called from, while\n    `$GENESIS_ROOT` is where the environment files are found.  There were\n    places this was incorrectly used, but would only cause a problem if `-C`\n    was used.\n\n* Bail if genesis.env isn't available for 2.7.x kits\n\n  Kits that need v2.7.0 or greater of Genesis expect genesis.env to be set,\n  not params.env.  Genesis now prints instructions on modifications needed to\n  the environment .yml file to upgrade it to v2.7.x standards.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.7.6",
      "version": "2.7.6"
    },
    {
      "notes": "# Improvements\n\n* Soften secrets validation assessment\n\n  This commit lowers the validation assesment from error to warning on the\n  following:\n\n  X509:\n    - CN doesn't match kit's expected CN\n    - SAN doesn't match kit's expected SAN, or if CN matches a diffent SAN\n    - Usage doesn't match kit's expected usage.\n\n  dhparams, rsa and ssh:\n    - size doesn't match kit's expectation\n\n  random string:\n    - size doesn't match kits expection\n    - characters used contain invalid characters\n\n  Added warnings for when certificate is expected to expire withing the\n  next 30 days.\n\n* Ensure genesis.env is present, warn on params.env\n\n  2.6.13 deprecated `params.env`, and for a brief time printed a warning\n  to that effect until it was determined that it was too noisy.\n\n  2.7.0-2.7.6 removed the usage of `params.env` and enforced the migration\n  of params.env to genesis.env, and kits declared with minimum version of\n  2.7.0 were expected to use `genesis.env` where they before used\n  `params.env`.\n\n  After pushback, we have decided to soften the stance, and print warnings\n  when the environment uses a kit with genesis_version_min of 2.7.0 or\n  higher.  As these kits require genesis.env to be set, we do so as part\n  of the manifest merge.\n\n# Bug Fixes\n\n* Fix kit version lookup on unsaved new environments\n\n* Fix expanded path in GENESIS_CALLBACK_BIN\n\n  If the genesis binary invoked involved a symlink in the path, then the\n  binary reference would have the full path.  This fixes that.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.7.7",
      "version": "2.7.7"
    },
    {
      "notes": "# Improvements\n\n* Add new secret type of UUID\n\n  In kit.yml, you can now generate UUIDs of all types.  By default, you just\n  need to specify the type 'uuid' for a path and key (similar to how 'random'\n  works.  The full syntax is:\n\n  `uuid [v1|time|v3|md5|v4|random|v5|sha1] [namespace (<UUID>|dns|url|oid|x500)] [name <string>] [fixed]`\n\n  With no arguments, a v4/random UUID is generated.  If v3/md5 or v5/sha1 is\n  specified, it takes a name and optional namespace argument to build the\n  hash, which will always generate the same value for the same input\n  arguments, unlike the other versions.  The name can be any string, and the\n  namespace can be the pre-defined namespaces of dns, url, oid or x500, or any\n  arbitrary UUID string.\n\n* Expanded config support.  Kits can now specify which configs are required\n  and for what hook scripts.  This allows for custom cloud and runtime configs\n  to be validated and used for information.  Furthermore, cloud config can now\n  be used during the `new` script to check if the required keys are present or\n  even propose values that can be added.\n\n  This is done using one of the following two styles:\n\n  ```\n  --- # kit.yml required_configs style 1\n  required_configs:\n    - cloud\n    - runtime\n    - runtime@thiskit\n  ```\n\n  ```\n  --- # kit.yml required configs style 2\n  required_configs:\n    cloud: true\n    runtime: [blueprint new]\n    funky: false\n  ```\n\n  In the first style, all hooks will require the listed configurations.  In\n  the second style, `cloud` config will always be required, `runtime` will\n  only be required when processing `blueprint` and `new` hooks, and `funky`\n  will never be required.\n\n  By default, if no `required_configs` block is specified, only `cloud` config\n  is requred when processing `blueprint`, and no other hooks.  This is\n  effectively the previous behaviour.\n\n* Add `move_secrets_to_credhub` bash helper function\n\n  `move_secrets_to_credhub src_path:key dst_path`\n\n  This will move a secret under the environments Vault area to the\n  environments credhub area.  Do not include the secrets base before the\n  `src_path`, or the bosh env/deployment prefix before the `dst_path`.\n\n* Derived features are features that are artificially created by the\n  hooks/features script to facilitate absent of other features or a specific\n  combination of features, so that secrets can be better specified (ie a\n  secret that only exists if a feature ISN'T specified)  They must start with\n  a `+`, are not checked with the validation features, and cannot be\n  explicitly stated in an environment file.\n\n# Bug Fixes\n\n* Kit releases that preceed the current version by 30 or more releases are no\n  longer reported as non-existant.\n\n* Compiled kits no longer contain the spec tests and kit devtools, as they\n  aren't needed to use the kit.\n\n* Improved details given when hooks fail, specifically when `blueprint` fails\n  to determine which manifest fragments are requied for merging\n\n* Don't populate missing `maybe` params\n\n  When a parameter is conditionally available, the `maybe:` parameter\n  dereference would prevent errors if the parameter was missing, but it would\n  leave an empty string as the value.  This changes that behaviour to drop the\n  key or the array element that was being set to the missing parameter.\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.7.9",
      "version": "2.7.9"
    },
    {
      "notes": "# Improvements\n\n  The `--cloud-config|--cc` and `--runtime-config|--rc` have been streamlined\n  into a single `--config|-c` with backwards compatibility to the existing\n  `-c` (for cloud config).  You can now specify named configs as such:\n\n  ```\n  -c [type[@name]=]/path/to/config.yml\n  ```\n\n  If type is not given, it is assumed cloud, and likewise if name is not\n  given, it is assumed to be the unnamed `default` config for the given\n  type.\n\n  `-c` can be specified multiple times to specify multiple configs.  It\n  does not error check that you haven't specified the same type and name\n  multiple times, so that's on you to ensure you're not doing that.\n\n# Bug Fixes\n\n* The overly agressive downloading of cloud config for most activities has\n  been reduced to only deployment and check, as was the previous behaviour.\n  Likewise, the downloading of cloud config is not attempted when deploying a\n  proto-bosh (or anything else that uses create-env for deployment)\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.7.10",
      "version": "2.7.10"
    },
    {
      "notes": "# Improvements\n\n- Add better kit id to exodus data\n\n  As more things use the previously deployed kit to determine what needs\n  to be upgraded, it is important to have this information correctly\n  identified.  Prior to this change, dev kits reported the name as dev and\n  the version as latest (from the env yaml file)\n\n  This change uses the kit name and version located in the kit.yml file\n  directly, and also adds `kit_is_dev` to record that a dev kit is being\n  used.\n\n- Added features to exodus export, info script\n\n  Features are now stored in exodus on successful deploy, and reported by\n  the info command.\n\n- *BREAKING CHANGE* Hooks now use `CREDHUB_*` environment variables to\n  connect to credhub.  This required your BOSH to be deployed with\n  bosh-genesis-kit v1.15.1 or later - please upgrade your bosh prior to\n  deploying any kits that use Credhub (cf, cf-app-autoscaler)\n\n- Decouple vault/bosh with loading of env\n\n  Not all genesis commands need vault or bosh, but it was being\n  proactively connected any time the env was loaded.\n\n# Kit Development Improvements\n\n- Add ability to require connections to kit hooks\n\n  Normally, hook don't need bosh or vault, but if they do, the kit can\n  specify which hook needs vault or bosh (or in the future credhub) so\n  the connection can be validated before the hooks are run (similar to the\n  required_configs behaviour)\n\n- Allow feature hook to access the same environment variables and helper\n  script that the other hooks use.\n\n# Bug Fixes\n\n- When safe was not configured with any targets, the error that occurred in\n  Genesis was confusing and not explanatory.  It will now plainly explain that\n  it is can't read `.saferc` and therefore not select the desired vault.\n\n- Fixed some BOSH config requirements that were problematic for some edge cases\n\n- Improve hook standard error handling.\n\n  Previous improvements stopped STDERR from being output directly to\n  screen.  This has been reverted so that STDERR would be output directly to\n  the terminal in real time.\n\n- Resolve recursion issue with feature hook checking if bosh create-env is\n  specified, which needs to check features, which runs feature hook...\n\n- Prevent double check_prereq calls\n\n# Minimum Dependencies\n\n- bosh: v5.0.1\n- spruce: v1.26.0\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.7.11",
      "version": "2.7.11"
    },
    {
      "notes": "# Bug Fixes\n\n- Fixes missing bosh config error in pipeline deployments\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.7.12",
      "version": "2.7.12"
    },
    {
      "notes": "# Improvements\n\nThis release contains improvements to Pipeline Generation and Integration\n\n* Enable Enterprise Vault support, use Safe to init\n\n  Instead of using the Vault Genesis kit, some clients need to integrate with\n  their companies Enterprise Vault.  This means supporting namespaces and\n  disabling strongbox, the process that Safe uses to treat multiple Vault VMs\n  as a single target when unsealing.\n\n  Since Safe nicely wraps up support for this, the pipelines have been updated\n  to use Safe to initialize connections to the Vault, making it seamless\n  regardless of it being Enterprise or not, v1 or v2 kv backend.\n\n  Changes:\n    - In your `ci.yml`, under `pipeline.vault`, you can specify `namespace` as\n      a string, and `no-strongbox` as a truthy value to connect to your\n      enterprise vault.\n\n* More dynamic 'default' pipeline layout.\n\n  If ci.yml specifies a `default` layout, that layout will be used without\n  having to specify it, but it will expect the fly target to also be `default`\n  -- this is at odds with the concourse `login` addon which names the fly\n  target the same as the environment name.\n\n  To resolve this, if you only have a single layout in your `ci.yml` file, it\n  will be considered the default, so it can be named the same as your fly\n  target aka concourse environment.  If you have muptiple layouts, a layout\n  named `default`, if it exists, will be considered default to keep existing\n  behaviour.  Otherwise, if you have multiple named layouts and you didn't\n  specify one in the `repipe` command, it will present you with a list to\n  chose from.  The `-t|--target` command will still behave as normal.\n\n* Use use https instead of ssh for git in pipeliens\n\n  Some places must use https endpoints with basic auth for accessing git\n  repositories instead of ssh with keys.  This enables that ability.\n\n  Change in behaviour:\n    - In the `ci.yml` file, under `pipeline.git`, you specify `username` and\n      `password` instead of `private_key`\n    - If `username` and `password` are used, the URI used will be\n      `https://<host>/<owner>/<repo>.git` but this can be specified directly\n      using `pipeline.git.uri`\n",
      "url": "https://github.com/starkandwayne/genesis/releases/tag/v2.7.13",
      "version": "2.7.13"
    }
  ],
  "latest": "2.7.13"
}
